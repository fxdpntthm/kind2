-- A record type 
type t = { one: int; two: real; three: bool };

-- A node returning a record type 
node Z(x: bool) returns (y: t);
let
  y = if x then
        t { one=0; two=1.0; three = true } 
      else
        t { one=1; two=2.0; three = false };
tel;

-- Another node 
node X(x: int) returns (y: int);
var v: t; 
let 

  -- Return value of record type 
  v = Z(true);

  -- Nested and unguarded pres 
  y = pre pre x + v.one;

tel;

-- Node with two return values
node nodecall (x: int) returns (f: bool; v: int);
let
  f = false;
  v = 0;
tel;

-- Node with node calls
node Y(x: int; r: real) returns (y: int; value: int);
var
  flag: bool;
  v: t;
let
  v = Z(true);

  -- Node call with pre in input parameter 
  y = X(pre x + v.one);

  -- Node call with two return values
  (flag, value) = if x > 0 then nodecall(x) else (true, 0);

  -- Non-variable property
  --%PROPERTY y > 0;
tel; 

-- Array-valued node 
node V(x: int) returns (y: int^3);
let
  y = (x + 1)^3;
tel


-- Nodes with array-valued node calls 
node W(x: int) returns (y: int);
var y_3 : int^3;
let

  -- Node call not top level of expression
  --y_3 = 1^3 + V(x);
  y_3 = V(x);
  y = y_3[0];

tel;
